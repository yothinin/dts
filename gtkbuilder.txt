GtkBuilder

GtkBuilder — Build an interface from an XML UI definition
Functions

void	(*GtkBuilderConnectFunc) ()
GtkBuilder *	gtk_builder_new ()
GtkBuilder *	gtk_builder_new_from_file ()
GtkBuilder *	gtk_builder_new_from_resource ()
GtkBuilder *	gtk_builder_new_from_string ()
void	gtk_builder_add_callback_symbol ()
void	gtk_builder_add_callback_symbols ()
GCallback	gtk_builder_lookup_callback_symbol ()
guint	gtk_builder_add_from_file ()
guint	gtk_builder_add_from_resource ()
guint	gtk_builder_add_from_string ()
guint	gtk_builder_add_objects_from_file ()
guint	gtk_builder_add_objects_from_string ()
guint	gtk_builder_add_objects_from_resource ()
guint	gtk_builder_extend_with_template ()
GObject *	gtk_builder_get_object ()
GSList *	gtk_builder_get_objects ()
void	gtk_builder_expose_object ()
void	gtk_builder_connect_signals ()
void	gtk_builder_connect_signals_full ()
void	gtk_builder_set_translation_domain ()
const gchar *	gtk_builder_get_translation_domain ()
void	gtk_builder_set_application ()
GtkApplication *	gtk_builder_get_application ()
GType	gtk_builder_get_type_from_name ()
gboolean	gtk_builder_value_from_string ()
gboolean	gtk_builder_value_from_string_type ()
#define	GTK_BUILDER_WARN_INVALID_CHILD_TYPE()
Properties

gchar *	translation-domain	Read / Write
Types and Values

 	GtkBuilder
enum	GtkBuilderError
#define	GTK_BUILDER_ERROR
Object Hierarchy

    GObject
    ╰── GtkBuilder
Includes

#include <gtk/gtk.h>
Description

A GtkBuilder is an auxiliary object that reads textual descriptions of a user interface and instantiates the described objects. To create a GtkBuilder from a user interface description, call gtk_builder_new_from_file(), gtk_builder_new_from_resource() or gtk_builder_new_from_string().

In the (unusual) case that you want to add user interface descriptions from multiple sources to the same GtkBuilder you can call gtk_builder_new() to get an empty builder and populate it by (multiple) calls to gtk_builder_add_from_file(), gtk_builder_add_from_resource() or gtk_builder_add_from_string().

A GtkBuilder holds a reference to all objects that it has constructed and drops these references when it is finalized. This finalization can cause the destruction of non-widget objects or widgets which are not contained in a toplevel window. For toplevel windows constructed by a builder, it is the responsibility of the user to call gtk_widget_destroy() to get rid of them and all the widgets they contain.

The functions gtk_builder_get_object() and gtk_builder_get_objects() can be used to access the widgets in the interface by the names assigned to them inside the UI description. Toplevel windows returned by these functions will stay around until the user explicitly destroys them with gtk_widget_destroy(). Other widgets will either be part of a larger hierarchy constructed by the builder (in which case you should not have to worry about their lifecycle), or without a parent, in which case they have to be added to some container to make use of them. Non-widget objects need to be reffed with g_object_ref() to keep them beyond the lifespan of the builder.

The function gtk_builder_connect_signals() and variants thereof can be used to connect handlers to the named signals in the description.

GtkBuilder UI Definitions

GtkBuilder parses textual descriptions of user interfaces which are specified in an XML format which can be roughly described by the RELAX NG schema below. We refer to these descriptions as “GtkBuilder UI definitions” or just “UI definitions” if the context is clear. Do not confuse GtkBuilder UI Definitions with GtkUIManager UI Definitions, which are more limited in scope. It is common to use .ui as the filename extension for files containing GtkBuilder UI definitions.

RELAX NG Compact Syntax

The toplevel element is <interface>. It optionally takes a “domain” attribute, which will make the builder look for translated strings using dgettext() in the domain specified. This can also be done by calling gtk_builder_set_translation_domain() on the builder. Objects are described by <object> elements, which can contain <property> elements to set properties, <signal> elements which connect signals to handlers, and <child> elements, which describe child objects (most often widgets inside a container, but also e.g. actions in an action group, or columns in a tree model). A <child> element contains an <object> element which describes the child object. The target toolkit version(s) are described by <requires> elements, the “lib” attribute specifies the widget library in question (currently the only supported value is “gtk+”) and the “version” attribute specifies the target version in the form “<major>.<minor>”. The builder will error out if the version requirements are not met.

Typically, the specific kind of object represented by an <object> element is specified by the “class” attribute. If the type has not been loaded yet, GTK+ tries to find the get_type() function from the class name by applying heuristics. This works in most cases, but if necessary, it is possible to specify the name of the get_type() function explictly with the "type-func" attribute. As a special case, GtkBuilder allows to use an object that has been constructed by a GtkUIManager in another part of the UI definition by specifying the id of the GtkUIManager in the “constructor” attribute and the name of the object in the “id” attribute.

Objects may be given a name with the “id” attribute, which allows the application to retrieve them from the builder with gtk_builder_get_object(). An id is also necessary to use the object as property value in other parts of the UI definition. GTK+ reserves ids starting and ending with ___ (3 underscores) for its own purposes.

Setting properties of objects is pretty straightforward with the <property> element: the “name” attribute specifies the name of the property, and the content of the element specifies the value. If the “translatable” attribute is set to a true value, GTK+ uses gettext() (or dgettext() if the builder has a translation domain set) to find a translation for the value. This happens before the value is parsed, so it can be used for properties of any type, but it is probably most useful for string properties. It is also possible to specify a context to disambiguate short strings, and comments which may help the translators.

GtkBuilder can parse textual representations for the most common property types: characters, strings, integers, floating-point numbers, booleans (strings like “TRUE”, “t”, “yes”, “y”, “1” are interpreted as TRUE, strings like “FALSE”, “f”, “no”, “n”, “0” are interpreted as FALSE), enumerations (can be specified by their name, nick or integer value), flags (can be specified by their name, nick, integer value, optionally combined with “|”, e.g. “GTK_VISIBLE|GTK_REALIZED”) and colors (in a format understood by gdk_rgba_parse()).

GVariants can be specified in the format understood by g_variant_parse(), and pixbufs can be specified as a filename of an image file to load.

Objects can be referred to by their name and by default refer to objects declared in the local xml fragment and objects exposed via gtk_builder_expose_object(). In general, GtkBuilder allows forward references to objects — declared in the local xml; an object doesn’t have to be constructed before it can be referred to. The exception to this rule is that an object has to be constructed before it can be used as the value of a construct-only property.

It is also possible to bind a property value to another object's property value using the attributes "bind-source" to specify the source object of the binding, "bind-property" to specify the source property and optionally "bind-flags" to specify the binding flags Internally builder implement this using GBinding objects. For more information see g_object_bind_property()

Signal handlers are set up with the <signal> element. The “name” attribute specifies the name of the signal, and the “handler” attribute specifies the function to connect to the signal. By default, GTK+ tries to find the handler using g_module_symbol(), but this can be changed by passing a custom GtkBuilderConnectFunc to gtk_builder_connect_signals_full(). The remaining attributes, “after”, “swapped” and “object”, have the same meaning as the corresponding parameters of the g_signal_connect_object() or g_signal_connect_data() functions. A “last_modification_time” attribute is also allowed, but it does not have a meaning to the builder.

Sometimes it is necessary to refer to widgets which have implicitly been constructed by GTK+ as part of a composite widget, to set properties on them or to add further children (e.g. the vbox of a GtkDialog). This can be achieved by setting the “internal-child” propery of the <child> element to a true value. Note that GtkBuilder still requires an <object> element for the internal child, even if it has already been constructed.

A number of widgets have different places where a child can be added (e.g. tabs vs. page content in notebooks). This can be reflected in a UI definition by specifying the “type” attribute on a <child> The possible values for the “type” attribute are described in the sections describing the widget-specific portions of UI definitions.

A GtkBuilder UI Definition

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
<interface>
  <object class="GtkDialog" id="dialog1">
    <child internal-child="vbox">
      <object class="GtkBox" id="vbox1">
        <property name="border-width">10</property>
        <child internal-child="action_area">
          <object class="GtkButtonBox" id="hbuttonbox1">
            <property name="border-width">20</property>
            <child>
              <object class="GtkButton" id="ok_button">
                <property name="label">gtk-ok</property>
                <property name="use-stock">TRUE</property>
                <signal name="clicked" handler="ok_button_clicked"/>
              </object>
            </child>
          </object>
        </child>
      </object>
    </child>
  </object>
</interface>
Beyond this general structure, several object classes define their own XML DTD fragments for filling in the ANY placeholders in the DTD above. Note that a custom element in a <child> element gets parsed by the custom tag handler of the parent object, while a custom element in an <object> element gets parsed by the custom tag handler of the object.

These XML fragments are explained in the documentation of the respective objects.

Additionally, since 3.10 a special <template> tag has been added to the format allowing one to define a widget class’s components. See the GtkWidget documentation for details.

Functions

GtkBuilderConnectFunc ()

void
(*GtkBuilderConnectFunc) (GtkBuilder *builder,
                          GObject *object,
                          const gchar *signal_name,
                          const gchar *handler_name,
                          GObject *connect_object,
                          GConnectFlags flags,
                          gpointer user_data);
This is the signature of a function used to connect signals. It is used by the gtk_builder_connect_signals() and gtk_builder_connect_signals_full() methods. It is mainly intended for interpreted language bindings, but could be useful where the programmer wants more control over the signal connection process. Note that this function can only be called once, subsequent calls will do nothing.

Parameters

builder
a GtkBuilder
 
object
object to connect a signal to
 
signal_name
name of the signal
 
handler_name
name of the handler
 
connect_object
a GObject, if non-NULL, use g_signal_connect_object().
[nullable]
flags
GConnectFlags to use
 
user_data
user data
 
Since: 2.12

gtk_builder_new ()

GtkBuilder *
gtk_builder_new (void);
Creates a new empty builder object.

This function is only useful if you intend to make multiple calls to gtk_builder_add_from_file(), gtk_builder_add_from_resource() or gtk_builder_add_from_string() in order to merge multiple UI descriptions into a single builder.

Most users will probably want to use gtk_builder_new_from_file(), gtk_builder_new_from_resource() or gtk_builder_new_from_string().

Returns

a new (empty) GtkBuilder object

Since: 2.12

gtk_builder_new_from_file ()

GtkBuilder *
gtk_builder_new_from_file (const gchar *filename);
Builds the GtkBuilder UI definition in the file filename .

If there is an error opening the file or parsing the description then the program will be aborted. You should only ever attempt to parse user interface descriptions that are shipped as part of your program.

Parameters

filename
filename of user interface description file
 
Returns

a GtkBuilder containing the described interface

Since: 3.10

gtk_builder_new_from_resource ()

GtkBuilder *
gtk_builder_new_from_resource (const gchar *resource_path);
Builds the GtkBuilder UI definition at resource_path .

If there is an error locating the resource or parsing the description, then the program will be aborted.

Parameters

resource_path
a GResource resource path
 
Returns

a GtkBuilder containing the described interface

Since: 3.10

gtk_builder_new_from_string ()

GtkBuilder *
gtk_builder_new_from_string (const gchar *string,
                             gssize length);
Builds the user interface described by string (in the GtkBuilder UI definition format).

If string is NULL-terminated, then length should be -1. If length is not -1, then it is the length of string .

If there is an error parsing string then the program will be aborted. You should not attempt to parse user interface description from untrusted sources.

Parameters

string
a user interface (XML) description
 
length
the length of string , or -1
 
Returns

a GtkBuilder containing the interface described by string

Since: 3.10

gtk_builder_add_callback_symbol ()

void
gtk_builder_add_callback_symbol (GtkBuilder *builder,
                                 const gchar *callback_name,
                                 GCallback callback_symbol);
Adds the callback_symbol to the scope of builder under the given callback_name .

Using this function overrides the behavior of gtk_builder_connect_signals() for any callback symbols that are added. Using this method allows for better encapsulation as it does not require that callback symbols be declared in the global namespace.

Parameters

builder
a GtkBuilder
 
callback_name
The name of the callback, as expected in the XML
 
callback_symbol
The callback pointer.
[scope async]
Since: 3.10

gtk_builder_add_callback_symbols ()

void
gtk_builder_add_callback_symbols (GtkBuilder *builder,
                                  const gchar *first_callback_name,
                                  GCallback first_callback_symbol,
                                  ...);
A convenience function to add many callbacks instead of calling gtk_builder_add_callback_symbol() for each symbol.

Parameters

builder
a GtkBuilder
 
first_callback_name
The name of the callback, as expected in the XML
 
first_callback_symbol
The callback pointer.
[scope async]
...
A list of callback name and callback symbol pairs terminated with NULL
 
Since: 3.10

gtk_builder_lookup_callback_symbol ()

GCallback
gtk_builder_lookup_callback_symbol (GtkBuilder *builder,
                                    const gchar *callback_name);
Fetches a symbol previously added to builder with gtk_builder_add_callback_symbols()

This function is intended for possible use in language bindings or for any case that one might be cusomizing signal connections using gtk_builder_connect_signals_full()

[skip]

Parameters

builder
a GtkBuilder
 
callback_name
The name of the callback
 
Returns

The callback symbol in builder for callback_name , or NULL.

[nullable]

Since: 3.10

gtk_builder_add_from_file ()

guint
gtk_builder_add_from_file (GtkBuilder *builder,
                           const gchar *filename,
                           GError **error);
Parses a file containing a GtkBuilder UI definition and merges it with the current contents of builder .

Most users will probably want to use gtk_builder_new_from_file().

If an error occurs, 0 will be returned and error will be assigned a GError from the GTK_BUILDER_ERROR, G_MARKUP_ERROR or G_FILE_ERROR domain.

It’s not really reasonable to attempt to handle failures of this call. You should not use this function with untrusted files (ie: files that are not part of your application). Broken GtkBuilder files can easily crash your program, and it’s possible that memory was leaked leading up to the reported failure. The only reasonable thing to do when an error is detected is to call g_error().

Parameters

builder
a GtkBuilder
 
filename
the name of the file to parse
 
error
return location for an error, or NULL.
[allow-none]
Returns

A positive value on success, 0 if an error occurred

Since: 2.12

gtk_builder_add_from_resource ()

guint
gtk_builder_add_from_resource (GtkBuilder *builder,
                               const gchar *resource_path,
                               GError **error);
Parses a resource file containing a GtkBuilder UI definition and merges it with the current contents of builder .

Most users will probably want to use gtk_builder_new_from_resource().

If an error occurs, 0 will be returned and error will be assigned a GError from the GTK_BUILDER_ERROR, G_MARKUP_ERROR or G_RESOURCE_ERROR domain.

It’s not really reasonable to attempt to handle failures of this call. The only reasonable thing to do when an error is detected is to call g_error().

Parameters

builder
a GtkBuilder
 
resource_path
the path of the resource file to parse
 
error
return location for an error, or NULL.
[allow-none]
Returns

A positive value on success, 0 if an error occurred

Since: 3.4

gtk_builder_add_from_string ()

guint
gtk_builder_add_from_string (GtkBuilder *builder,
                             const gchar *buffer,
                             gsize length,
                             GError **error);
Parses a string containing a GtkBuilder UI definition and merges it with the current contents of builder .

Most users will probably want to use gtk_builder_new_from_string().

Upon errors 0 will be returned and error will be assigned a GError from the GTK_BUILDER_ERROR, G_MARKUP_ERROR or G_VARIANT_PARSE_ERROR domain.

It’s not really reasonable to attempt to handle failures of this call. The only reasonable thing to do when an error is detected is to call g_error().

Parameters

builder
a GtkBuilder
 
buffer
the string to parse
 
length
the length of buffer (may be -1 if buffer is nul-terminated)
 
error
return location for an error, or NULL.
[allow-none]
Returns

A positive value on success, 0 if an error occurred

Since: 2.12

gtk_builder_add_objects_from_file ()

guint
gtk_builder_add_objects_from_file (GtkBuilder *builder,
                                   const gchar *filename,
                                   gchar **object_ids,
                                   GError **error);
Parses a file containing a GtkBuilder UI definition building only the requested objects and merges them with the current contents of builder .

Upon errors 0 will be returned and error will be assigned a GError from the GTK_BUILDER_ERROR, G_MARKUP_ERROR or G_FILE_ERROR domain.

If you are adding an object that depends on an object that is not its child (for instance a GtkTreeView that depends on its GtkTreeModel), you have to explicitly list all of them in object_ids .

Parameters

builder
a GtkBuilder
 
filename
the name of the file to parse
 
object_ids
nul-terminated array of objects to build.
[array zero-terminated=1][element-type utf8]
error
return location for an error, or NULL.
[allow-none]
Returns

A positive value on success, 0 if an error occurred

Since: 2.14

gtk_builder_add_objects_from_string ()

guint
gtk_builder_add_objects_from_string (GtkBuilder *builder,
                                     const gchar *buffer,
                                     gsize length,
                                     gchar **object_ids,
                                     GError **error);
Parses a string containing a GtkBuilder UI definition building only the requested objects and merges them with the current contents of builder .

Upon errors 0 will be returned and error will be assigned a GError from the GTK_BUILDER_ERROR or G_MARKUP_ERROR domain.

If you are adding an object that depends on an object that is not its child (for instance a GtkTreeView that depends on its GtkTreeModel), you have to explicitly list all of them in object_ids .

Parameters

builder
a GtkBuilder
 
buffer
the string to parse
 
length
the length of buffer (may be -1 if buffer is nul-terminated)
 
object_ids
nul-terminated array of objects to build.
[array zero-terminated=1][element-type utf8]
error
return location for an error, or NULL.
[allow-none]
Returns

A positive value on success, 0 if an error occurred

Since: 2.14

gtk_builder_add_objects_from_resource ()

guint
gtk_builder_add_objects_from_resource (GtkBuilder *builder,
                                       const gchar *resource_path,
                                       gchar **object_ids,
                                       GError **error);
Parses a resource file containing a GtkBuilder UI definition building only the requested objects and merges them with the current contents of builder .

Upon errors 0 will be returned and error will be assigned a GError from the GTK_BUILDER_ERROR, G_MARKUP_ERROR or G_RESOURCE_ERROR domain.

If you are adding an object that depends on an object that is not its child (for instance a GtkTreeView that depends on its GtkTreeModel), you have to explicitly list all of them in object_ids .

Parameters

builder
a GtkBuilder
 
resource_path
the path of the resource file to parse
 
object_ids
nul-terminated array of objects to build.
[array zero-terminated=1][element-type utf8]
error
return location for an error, or NULL.
[allow-none]
Returns

A positive value on success, 0 if an error occurred

Since: 3.4

gtk_builder_extend_with_template ()

guint
gtk_builder_extend_with_template (GtkBuilder *builder,
                                  GtkWidget *widget,
                                  GType template_type,
                                  const gchar *buffer,
                                  gsize length,
                                  GError **error);
Main private entry point for building composite container components from template XML.

This is exported purely to let gtk-builder-tool validate templates, applications have no need to call this function.

Parameters

builder
a GtkBuilder
 
widget
the widget that is being extended
 
template_type
the type that the template is for
 
buffer
the string to parse
 
length
the length of buffer (may be -1 if buffer is nul-terminated)
 
error
return location for an error, or NULL.
[allow-none]
Returns

A positive value on success, 0 if an error occurred

gtk_builder_get_object ()

GObject *
gtk_builder_get_object (GtkBuilder *builder,
                        const gchar *name);
Gets the object named name . Note that this function does not increment the reference count of the returned object.

Parameters

builder
a GtkBuilder
 
name
name of object to get
 
Returns

the object named name or NULL if it could not be found in the object tree.

[nullable][transfer none]

Since: 2.12

gtk_builder_get_objects ()

GSList *
gtk_builder_get_objects (GtkBuilder *builder);
Gets all objects that have been constructed by builder . Note that this function does not increment the reference counts of the returned objects.

Parameters

builder
a GtkBuilder
 
Returns

a newly-allocated GSList containing all the objects constructed by the GtkBuilder instance. It should be freed by g_slist_free().

[element-type GObject][transfer container]

Since: 2.12

gtk_builder_expose_object ()

void
gtk_builder_expose_object (GtkBuilder *builder,
                           const gchar *name,
                           GObject *object);
Add object to the builder object pool so it can be referenced just like any other object built by builder.

Parameters

builder
a GtkBuilder
 
name
the name of the object exposed to the builder
 
object
the object to expose
 
Since: 3.8

gtk_builder_connect_signals ()

void
gtk_builder_connect_signals (GtkBuilder *builder,
                             gpointer user_data);
This method is a simpler variation of gtk_builder_connect_signals_full(). It uses symbols explicitly added to builder with prior calls to gtk_builder_add_callback_symbol(). In the case that symbols are not explicitly added; it uses GModule’s introspective features (by opening the module NULL) to look at the application’s symbol table. From here it tries to match the signal handler names given in the interface description with symbols in the application and connects the signals. Note that this function can only be called once, subsequent calls will do nothing.

Note that unless gtk_builder_add_callback_symbol() is called for all signal callbacks which are referenced by the loaded XML, this function will require that GModule be supported on the platform.

If you rely on GModule support to lookup callbacks in the symbol table, the following details should be noted:

When compiling applications for Windows, you must declare signal callbacks with G_MODULE_EXPORT, or they will not be put in the symbol table. On Linux and Unices, this is not necessary; applications should instead be compiled with the -Wl,--export-dynamic CFLAGS, and linked against gmodule-export-2.0.

Parameters

builder
a GtkBuilder
 
user_data
user data to pass back with all signals
 
Since: 2.12

gtk_builder_connect_signals_full ()

void
gtk_builder_connect_signals_full (GtkBuilder *builder,
                                  GtkBuilderConnectFunc func,
                                  gpointer user_data);
This function can be thought of the interpreted language binding version of gtk_builder_connect_signals(), except that it does not require GModule to function correctly.

Parameters

builder
a GtkBuilder
 
func
the function used to connect the signals.
[scope call]
user_data
arbitrary data that will be passed to the connection function
 
Since: 2.12

gtk_builder_set_translation_domain ()

void
gtk_builder_set_translation_domain (GtkBuilder *builder,
                                    const gchar *domain);
Sets the translation domain of builder . See “translation-domain”.

Parameters

builder
a GtkBuilder
 
domain
the translation domain or NULL.
[allow-none]
Since: 2.12

gtk_builder_get_translation_domain ()

const gchar *
gtk_builder_get_translation_domain (GtkBuilder *builder);
Gets the translation domain of builder .

Parameters

builder
a GtkBuilder
 
Returns

the translation domain. This string is owned by the builder object and must not be modified or freed.

Since: 2.12

gtk_builder_set_application ()

void
gtk_builder_set_application (GtkBuilder *builder,
                             GtkApplication *application);
Sets the application associated with builder .

You only need this function if there is more than one GApplication in your process. application cannot be NULL.

Parameters

builder
a GtkBuilder
 
application
a GtkApplication
 
Since: 3.10

gtk_builder_get_application ()

GtkApplication *
gtk_builder_get_application (GtkBuilder *builder);
Gets the GtkApplication associated with the builder.

The GtkApplication is used for creating action proxies as requested from XML that the builder is loading.

By default, the builder uses the default application: the one from g_application_get_default(). If you want to use another application for constructing proxies, use gtk_builder_set_application().

Parameters

builder
a GtkBuilder
 
Returns

the application being used by the builder, or NULL.

[nullable][transfer none]

Since: 3.10

gtk_builder_get_type_from_name ()

GType
gtk_builder_get_type_from_name (GtkBuilder *builder,
                                const char *type_name);
Looks up a type by name, using the virtual function that GtkBuilder has for that purpose. This is mainly used when implementing the GtkBuildable interface on a type.

Parameters

builder
a GtkBuilder
 
type_name
type name to lookup
 
Returns

the GType found for type_name or G_TYPE_INVALID if no type was found

Since: 2.12

gtk_builder_value_from_string ()

gboolean
gtk_builder_value_from_string (GtkBuilder *builder,
                               GParamSpec *pspec,
                               const gchar *string,
                               GValue *value,
                               GError **error);
This function demarshals a value from a string. This function calls g_value_init() on the value argument, so it need not be initialised beforehand.

This function can handle char, uchar, boolean, int, uint, long, ulong, enum, flags, float, double, string, GdkColor, GdkRGBA and GtkAdjustment type values. Support for GtkWidget type values is still to come.

Upon errors FALSE will be returned and error will be assigned a GError from the GTK_BUILDER_ERROR domain.

Parameters

builder
a GtkBuilder
 
pspec
the GParamSpec for the property
 
string
the string representation of the value
 
value
the GValue to store the result in.
[out]
error
return location for an error, or NULL.
[allow-none]
Returns

TRUE on success

Since: 2.12

gtk_builder_value_from_string_type ()

gboolean
gtk_builder_value_from_string_type (GtkBuilder *builder,
                                    GType type,
                                    const gchar *string,
                                    GValue *value,
                                    GError **error);
Like gtk_builder_value_from_string(), this function demarshals a value from a string, but takes a GType instead of GParamSpec. This function calls g_value_init() on the value argument, so it need not be initialised beforehand.

Upon errors FALSE will be returned and error will be assigned a GError from the GTK_BUILDER_ERROR domain.

Parameters

builder
a GtkBuilder
 
type
the GType of the value
 
string
the string representation of the value
 
value
the GValue to store the result in.
[out]
error
return location for an error, or NULL.
[allow-none]
Returns

TRUE on success

Since: 2.12

GTK_BUILDER_WARN_INVALID_CHILD_TYPE()

#define             GTK_BUILDER_WARN_INVALID_CHILD_TYPE(object, type)
This macro should be used to emit a warning about and unexpected type value in a GtkBuildable add_child implementation.

Parameters

object
the GtkBuildable on which the warning ocurred
 
type
the unexpected type value
 
Types and Values

GtkBuilder

typedef struct _GtkBuilder GtkBuilder;
enum GtkBuilderError

Error codes that identify various errors that can occur while using GtkBuilder.

Members

GTK_BUILDER_ERROR_INVALID_TYPE_FUNCTION
A type-func attribute didn’t name a function that returns a GType.
 
GTK_BUILDER_ERROR_UNHANDLED_TAG
The input contained a tag that GtkBuilder can’t handle.
 
GTK_BUILDER_ERROR_MISSING_ATTRIBUTE
An attribute that is required by GtkBuilder was missing.
 
GTK_BUILDER_ERROR_INVALID_ATTRIBUTE
GtkBuilder found an attribute that it doesn’t understand.
 
GTK_BUILDER_ERROR_INVALID_TAG
GtkBuilder found a tag that it doesn’t understand.
 
GTK_BUILDER_ERROR_MISSING_PROPERTY_VALUE
A required property value was missing.
 
GTK_BUILDER_ERROR_INVALID_VALUE
GtkBuilder couldn’t parse some attribute value.
 
GTK_BUILDER_ERROR_VERSION_MISMATCH
The input file requires a newer version of GTK+.
 
GTK_BUILDER_ERROR_DUPLICATE_ID
An object id occurred twice.
 
GTK_BUILDER_ERROR_OBJECT_TYPE_REFUSED
A specified object type is of the same type or derived from the type of the composite class being extended with builder XML.
 
GTK_BUILDER_ERROR_TEMPLATE_MISMATCH
The wrong type was specified in a composite class’s template XML
 
GTK_BUILDER_ERROR_INVALID_PROPERTY
The specified property is unknown for the object class.
 
GTK_BUILDER_ERROR_INVALID_SIGNAL
The specified signal is unknown for the object class.
 
GTK_BUILDER_ERROR_INVALID_ID
An object id is unknown
 
GTK_BUILDER_ERROR

#define GTK_BUILDER_ERROR                (gtk_builder_error_quark ())
Property Details

The “translation-domain” property

  “translation-domain”       gchar *
The translation domain used when translating property values that have been marked as translatable in interface descriptions. If the translation domain is NULL, GtkBuilder uses gettext(), otherwise g_dgettext().

Flags: Read / Write

Default value: NULL

Since: 2.12
